import { Connection, Keypair, PublicKey, Transaction } from "@solana/web3.js";
import { BpfLoaderUpgradeable } from "./components/bpfLoaderUpgradeable";
import * as fs from "fs";

// Load keypair from file (e.g., generated by `solana-keygen new`)
const keypairPath = process.env.HOME + "/.config/solana/id.json"; // Adjust path as needed
const keypairData = JSON.parse(fs.readFileSync(keypairPath, "utf-8"));
const walletKeypair = Keypair.fromSecretKey(Uint8Array.from(keypairData));

// Connection to Solana devnet
const connection = new Connection("https://api.devnet.solana.com", "confirmed");

// Wallet object with signTransaction and sendTransaction
const wallet = {
  publicKey: walletKeypair.publicKey,
  signTransaction: async (tx) => {
    tx.partialSign(walletKeypair);
    return tx;
  },
  sendTransaction: async (tx, conn) => {
    const signature = await conn.sendRawTransaction(tx.serialize());
    await conn.confirmTransaction(signature, "confirmed");
    return signature;
  },
};

// Load program data
const programData = fs.readFileSync("./my_program.so");

async function test() {
  try {
    const buffer = Keypair.generate();
    const lamports = await connection.getMinimumBalanceForRentExemption(
      BpfLoaderUpgradeable.getBufferAccountSize(programData.length)
    );
    const signature = await BpfLoaderUpgradeable.createBuffer(
      buffer,
      lamports,
      programData.length,
      { wallet, connection }
    );
    console.log("Buffer signature:", signature);
  } catch (err) {
    console.error("Test error:", {
      message: err.message || "Unknown error",
      stack: err.stack || "No stack trace",
      solanaError: err.logs ? err.logs : null,
    });
  }
}

test();